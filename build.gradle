plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.fastcampus'
version = '0.1.3-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    //runtimeOnly 'com.mysql:mysql-connector-j'
    //runtimeOnly 'org.postgresql:postgresql'
    // 사용자 정의 Configuration 프로퍼티에 대한 지원을 추가해주는 코드
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // queryDSL 설정
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-core" // querydsl-jpa에 core는 포함되어 있어서 굳이 포함해주지 않아도 된다.
    implementation "com.querydsl:querydsl-collections"
    // Gradle 문법인 xxx:xxx:version과는 조금 다른 형식을 가지고 있어서 직접 dependencyManagement로 버전을 넣어줍니다.
    // Groove 문법 중 하나인 "${}"을 사용하면 변수를 넣을 수 있다. '${}'을 사용하면 문자열로 처리되기 때문에 주의
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
}

tasks.named('test') {
    useJUnitPlatform()
}

//// Querydsl 설정부
def generated = 'src/main/generated' // QClass를 생성하는 경로를 수동으로 설정 (gitignore에 추가)

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}